#!/bin/bash

PROG_NAME=${0##*/}

# Output for the generated file
MAKEFILE=tools/Makefile.config

# Separate compilation
BUILD_DIR="_build"

help() {
  cat << EOF
$PROG_NAME generates $MAKEFILE.
usage: $PROG_NAME [<options>]

options:
  -h|--help
      show this help
  --api
      build the API
  -bd|--build-dir
      separate directory for build (default: $BUILD_DIR)
  -d|--debug
      add debugging symbols to the build command
  -i|--interactive
      run $PROG_NAME interactively
  -nw|--no-warn-error
      do not treat warning as error
  -r|--redis_path
      path for the redis library (necessary if building the API)
  -s|--static
      statically link libraries
EOF
}

# Parse options
# Options for Makefile
OCAMLC=
OCAMLOPT=
OCAMLFLAGS="-safe-string"

CAMLP5F=
CAMLP5D=
MYSQL=
CURL=
OREDIS=
LREDIS=
RE=
WARN="-warn-error A"
STRIP=true
RM=
EXE=
LINKSTATIC=
LINKSTATIC_OUT=
OS_TYPE=

# Options for configure
STATIC=n
API=n
DEBUG=
INTERACTIVE=n
NATIVE=

while [[ $# -ne 0 ]]; do
  case $1 in
    -h|--help)
      help; exit ;;
    --api)
      API=y ;;
    -bd|--build-dir)
      BUILD_DIR="$2";
      shift ;;
    -d|--debug)
      DEBUG="-g -annot" ;;
    -i|--interactive)
      INTERACTIVE=y ;;
    -nw|--no-warn-error)
      WARN= ;;
    -r|--redis_path)
      LREDIS="$2";
      shift ;;
    -s|--static)
      STATIC=y ;;
    *)
      echo -e "\\x1b[33m[WARNING]\\x1b[0m Option $1 unknown and ignored.";;
  esac
  [[ $# -gt 0 ]] && shift
done

# Functions that print the checked information

# Length of line for print_check_*
LINE_WIDTH=60

print_check_ok() {
  n=$(( $LINE_WIDTH-${#1}-8 ))
  printf "\\x1b[36m[INFO]\\x1b[0m %s " "$1"
  printf ".%.0s" $(eval "echo {1.."$(($n))"}")
  printf " \\x1b[32m%s\\x1b[0m" "$2"
  echo
}

print_check_warn() {
  n=$(( $LINE_WIDTH-${#1}-8 ))
  printf "\\x1b[36m[INFO]\\x1b[0m %s " "$1"
  printf ".%.0s" $(eval "echo {1.."$(($n))"}")
  printf " \\x1b[33m%s\\x1b[0m" "$2"
  echo
}

print_check_err() {
  n=$(( $LINE_WIDTH-${#1}-8 ))
  printf "\\x1b[36m[INFO]\\x1b[0m %s " "$1"
  printf ".%.0s" $(eval "echo {1.."$(($n))"}")
  printf " \\x1b[31m%s\\x1b[0m" "ERROR"
  echo
  echo "$2"
  echo "Configuration script failed!"
  exit 1
}

# Functions to check the environment

check_os() {
  OS_TYPE=`uname -s`
  if [[ $OS_TYPE == "Darwin" ]] || [[ $OS_TYPE == "Linux" ]] ; then
    print_check_ok "Checking OS type" "UNIX"
    CAMLP5F+=" -D UNIX"
    RM="/bin/rm -f"
    EXE=
    if [[ $STATIC == y ]]; then
      LINKSTATIC+=" -ccopt -static -ccopt -static-libgcc"
      STRIP=true
    else
      STRIP=strip
    fi
  else
    print_check_ok "Checking OS type" "WINDOWS"
    CAMLP5F+=" -D WIN95"
    STRIP=true
    RM="rm -f"
    EXE=".exe"
  fi
}

check_ocaml() {
  if ocamlc -v >/dev/null 2>&1; then
    print_check_ok "Checking OCaml compiler" "OK"
    OCAMLC=ocamlc
    OCAMLOPT=ocamlopt
    if [[ $STATIC == y ]]; then
      LINKSTATIC_OUT+=" -custom"
    fi
  else
    print_check_err "Checking OCaml compiler" \
        "You need the command ocamlc accessible in the path!"
  fi
}

check_native_ocaml() {
  if ocamlc.opt -v >/dev/null 2>&1; then
    print_check_ok "Checking OCaml native compiler" "OK"
    OCAMLC=ocamlc.opt
    OCAMLOPT=ocamlopt.opt
    NATIVE=y
  else
    print_check_warn "Checking OCaml native compiler" "NOT FOUND"
  fi
}

verge() {
  # osx doesn't have sort -V
  # [ "$2" = "`echo -e "$1\n$2" | sort -V | head -n1`" ]
  [ "$2" = "`echo -e "$1\n$2" | tr ' ' '\n' | sort -n | head -n1`" ]
}

check_ocaml_version() {
  OCAML_MIN_VER="4.02"
  OCAML_VER="`ocamlc -version`"
  if verge "$OCAML_VER" "$OCAML_MIN_VER"; then
    print_check_ok \
      "Checking OCaml compiler version $OCAML_VER >= $OCAML_MIN_VER" \
      "OK"
  else
    print_check_err "Checking OCaml compiler version $OCAML_VER" \
        "OCaml version $OCAML_MIN_VER or newer needed."
  fi
}

check_camlp5() {
  if camlp5 -v >/dev/null 2>&1; then
    print_check_ok "Checking Camlp5" "OK"
    CAMLP5D="+camlp5"
  else
    print_check_err "Checking Camlp5" \
        "You need the command camlp5 accessible in the path!"
  fi
}

check_ocamlfind() {
  if ocamlfind printconf >/dev/null 2>&1; then
    print_check_ok "Checking ocamlfind" "OK"
    OCAMLC="ocamlfind ocamlc"
    OCAMLOPT="ocamlfind ocamlopt"
    CAMLP5D=`ocamlfind query camlp5`/
    if [[ $STATIC == y ]]; then
      LINKSTATIC+=" -linkpkg"
    fi
  elif [[ $API == y ]]; then
    print_check_err "Checking ocamlfind" \
        "You need the command ocamlfind accessible in the path!"
  else
    print_check_warn "Checking ocamlfind" "NOT FOUND"
  fi
}

check_api() {
  if [[ $API == y ]]; then
    OCAMLFLAGS+=" -package piqirun.ext -package curl"
    CAMLP5F+=" -DAPI"
  fi
}

check_mysql() {
  if [[ $API == y ]]; then
    if ocamlfind query mysql >/dev/null 2>&1; then
      print_check_ok "Checking OCaml mysql" "OK"
      MYSQL=`ocamlfind query mysql`/
    else
      print_check_err "Checking OCaml mysql" \
          "You need the OCaml dependency mysql!"
    fi
  fi
}

check_curl() {
  if [[ $API == y ]]; then
    if ocamlfind query curl >/dev/null 2>&1; then
      print_check_ok "Checking OCaml curl" "OK"
      CURL=`ocamlfind query curl`/
    else
      print_check_err "Checking OCaml curl" \
          "You need the OCaml dependency curl!"
    fi
  fi
}

check_redis_path() {
  if [[ -e "${LREDIS}/_build/src/redis.cmxs" ]]; then
    LREDIS="${LREDIS}/_build/src/"
    return 0
  elif [[ -e "${LREDIS}/src/redis.cmxs" ]]; then
    LREDIS="${LREDIS}/src/"
    return 0
  elif [[ -e "${LREDIS}/redis.cmxs" ]]; then
    return 0
  fi
  return 1
}

check_redis() {
  if [[ $API == y ]]; then
    if ! ocamlfind query redis >/dev/null 2>&1; then
      print_check_err "Checking OCaml redis" \
          "You need the OCaml dependency redis!"
    elif ! check_redis_path; then
      print_check_err "Checking OCaml redis" \
          "You need to provide a valid redis path!"
    fi
    print_check_ok "Checking OCaml redis" "OK"
    OREDIS=`ocamlfind query redis`/
  fi
}

check_re() {
  if [[ $API == y ]]; then
    if ocamlfind query re >/dev/null 2>&1; then
      print_check_ok "Checking OCaml re" "OK"
      RE=`ocamlfind query re`/
    else
      print_check_err "Checking OCaml re" \
          "You need the OCaml dependency re!"
    fi
  fi
}

check_environment() {
  check_os
  check_ocaml
  check_ocaml_version
  check_native_ocaml
  check_camlp5
  check_ocamlfind
  check_api
  check_mysql
  check_curl
  check_redis
  check_re
}

# Functions to print Makefile.config.

# Print common options, should be called first.
print_common_header() {
  (echo "# This file is generated by $0."
   echo
   echo "ifeq (\$(ROOT),'')"
   echo "  \$(error Variable ROOT must be defined in each Makefile before \
it is included.)"
   echo "endif"
   echo
   echo "# For echo and colors."
   echo "SHELL:=/bin/bash"
   echo
   echo "# Formatting and colors."
   echo "GREEN:=\"\\\\x1b[32m\""
   echo "YELLOW:=\"\\\\x1b[33m\""
   echo "RED:=\"\\\\x1b[31m\""
   echo "MAGENTA:=\"\\\\x1b[35m\""
   echo "CYAN:=\"\\\\x1b[36m\""
   echo "BOLD:=\"\\\\x1b[1m\""
   echo "CLEAR:=\"\\\\x1b[0m\""
   echo
   echo "# A newline character to generate multiline recipes"
   echo "define \\n"
   echo
   echo
   echo "endef"
   echo
   echo "# Variables for packagers."
   echo "PREFIX=/usr"
   echo "LANGDIR=\$(PREFIX)/share/geneweb"
   echo "MANDIR=\$(PREFIX)/man/man1"
   echo "DESTDIR=distribution"
   echo "MANPAGES=ged2gwb.1 gwb2ged.1 gwc.1 gwc2.1 gwu.1 gwd.1 consang.1 \
gwsetup.1"
   echo
   echo "# Build directory."
   echo "BUILD_DIR=\$(ROOT)/${BUILD_DIR}"
   echo
   echo "OS_TYPE=${OS_TYPE}"
  ) > $MAKEFILE
}

print_tools() {
  (echo
   echo "CAMLP5_COMM=\$(ROOT)/tools/camlp5_comm.sh"
   echo "STRIP=${STRIP}"
   echo "RM=${RM}"
   echo "EXE=${EXE}"
   echo "TEST_DIR=[ \"\$(abspath \$<)\" = \"\$(abspath ./\$(notdir \$<))\" ] || \
{ echo \"Cannot build target '\$@'\"; \
echo \"Please run 'make' in directory '\$(dir \$<)' first\"; \
exit 1; }"
   echo "DEP_OBJS=\$2 \$(patsubst %.cmx,%,\$(filter %.cmx,\$(shell \$(ROOT)/tools/transitive_depend.sh \$(OCAMLI) \$1.cmx))) \$3 \$1"
   echo
   echo ".PHONY: always"
   echo "always:"
   echo
  ) >> $MAKEFILE
}

print_compiler() {
  (echo
   echo "# File extensions."
   echo "LIB_opt_EXT := .cmxa"
   echo "LIB_out_EXT := .cma"
   echo "OBJ_opt_EXT := .cmx"
   echo "OBJ_out_EXT := .cmo"
   echo
   echo "# Compiler options."
   echo "OCAMLI=\$(foreach d,\$(INCDIRS),-I \$d)"
   echo "OCAMLFLAGS=${OCAMLFLAGS} ${WARN} ${DEBUG}"
   echo "OCAMLC=${OCAMLC} \$(OCAMLFLAGS)"
   echo "OCAMLOPT=${OCAMLOPT} \$(OCAMLFLAGS)"
   echo "OCAML_opt_LINK=\$(OCAMLOPT) \$(LINKSTATIC)"
   echo "OCAML_out_LINK=\$(OCAMLC) \$(LINKSTATIC) \$(LINKSTATIC_OUT)"
   echo "CAMLP5F=${CAMLP5F}"
   echo "LINKUNIX=-cclib -lunix"
   echo "LINKSTATIC=${LINKSTATIC}"
   echo "LINKSTATIC_OUT=${LINKSTATIC_OUT}"
   echo
   echo "# Compiler dependencies."
   echo "CAMLP5D=${CAMLP5D}"
   if [[ $API == y ]]; then
     echo "LIBUNIX="
     echo "MYSQL=${MYSQL}"
     echo "OCURL=${CURL}"
     echo "OREDIS=${OREDIS}"
     echo "RE=${RE}"
     echo "LREDIS=${LREDIS}"
     echo "WITH_API=y"
   else
     echo "LIBUNIX=unix"
   fi
   ) >> $MAKEFILE
}

print_common_target() {
  (echo
   echo "# Target 'all' is defined here."
   echo
   echo ".SUFFIXES:"
   echo ".PHONY: all clean clean-comp clean-depend clean-exe clean-tmp depend opt out"
   echo ".DEFAULT_GOAL := all"
   echo
   if [[ $NATIVE == y ]]; then
     echo "all: opt" >> $MAKEFILE
   else
     echo "all: out" >> $MAKEFILE
   fi
   echo "DEPEND_DEPEND_NAMES := pa_lock.cmo pa_html.cmo q_codes.cmo"
   echo "DEPEND_DEPEND := \$(addprefix \$(ROOT)/src/,\$(DEPEND_DEPEND_NAMES))"
   echo
   echo "# Targets 'opt' and 'out' are defined here if not in the root Makefile."
   echo "ifneq (\$(ROOT),.)"
   echo
   echo "ifeq (\$(ALL_OBJS)\$(ALL_EXE),)"
   echo "  \$(error Variables ALL_OBJS and/or ALL_EXE must be defined before include)"
   echo "endif"
   echo
   echo "opt: \$(ALL_OBJS:=.cmx) \$(ALL_EXE:=.opt)"
   echo "out: \$(ALL_OBJS:=.cmo) \$(ALL_EXE:=.out)"
   echo
   echo "out: STRIP := @\\#"
   echo
   echo "opt out:"
   echo "	\$(foreach EXE,\$(ALL_EXE),ln -fs \$(EXE).\$@ \$(EXE) \$(\\n))"
   echo "	\$(if \$(ALL_EXE),\$(STRIP) \$(ALL_EXE))"
   echo
   echo "%.opt: EXT = opt"
   echo "%.out: EXT = out"
   echo
   echo "%.out %.opt:"
   echo "	\$(OCAML_\$(EXT)_LINK) \$(OCAMLI) \$(LIBS:=\$(LIB_\$(EXT)_EXT)) \$(LINKFLAGS) \$^ -o \$@"
   echo
   echo "depend: \$(DEPEND_DEPEND)"
   echo "	\$(ROOT)/tools/camlp5_depend.sh \$(CAMLP5F) \$(OCAMLI) -- \$(wildcard *.ml *.mli) > .depend"
   echo
   echo ".depend:"
   echo "	@if [ ! -e \$@ ]; then \$(MAKE) -o \$@ depend; fi"
   echo
   echo ".objs: .depend \$(INCDIRS:=/.depend)"
   echo "	echo \"# Generated by make\" > \$@"
   echo "	\$(foreach exe,\$(ALL_EXE),echo \"\$(exe)_OBJS := \\"
   echo "	  \$(call DEP_OBJS,\$(exe),\$(\$(exe)_PREPEND_OBJS),\$(\$(exe)_APPEND_OBJS))\" >> \$@\$(\\n))"
   echo "	\$(foreach exe,\$(ALL_EXE),echo \"\$(exe).opt: \\\$\$(\$(exe)_OBJS:=.cmx)\" >> \$@\$(\\n))"
   echo "	\$(foreach exe,\$(ALL_EXE),echo \"\$(exe).out: \\\$\$(\$(exe)_OBJS:=.cmo)\" >> \$@\$(\n))"
   echo
   echo "ifneq (\$(filter-out clean depend \$(DEPEND_DEPEND_NAMES),\$(MAKECMDGOALS)),)"
   echo "  include .depend"
   echo "  include .objs"
   echo "endif"
   echo
   echo "clean-exe:"
   echo "	\$(RM) *.out *.opt \$(ALL_EXE)"
   echo
   echo "clean: clean-tmp clean-comp clean-exe clean-depend"
   echo
   echo "endif"
   echo
   echo "clean-comp:"
   echo "	\$(RM) *.cm[oixa] *.cmxa *.o *.pp[oi] *.annot"
   echo
   echo "clean-depend":
   echo "	\$(RM) .depend .objs"
   echo
   echo "clean-tmp:"
   echo "	\$(RM) *~ .#*"
   echo
   echo "%.cmi: %.mli"
   echo "	@\$(TEST_DIR)"
   echo "	@\$(CAMLP5_COMM) \$(CAMLP5F) \$< -o \$*.ppi"
   echo "	\$(OCAMLC) \$(OCAMLI) -I \$(CAMLP5D) -c -intf \$*.ppi"
   echo "	\$(RM) \$*.ppi"
   echo
   echo "%.cmo: %.ml"
   echo "	@\$(TEST_DIR)"
   echo "	@\$(CAMLP5_COMM) \$(CAMLP5F) \$< -o \$*.ppo"
   echo "	\$(OCAMLC) \$(OCAMLI) -I \$(CAMLP5D) -c -impl \$*.ppo"
   echo "	\$(RM) \$*.ppo"
   echo
   echo "%.cmx: %.ml"
   echo "	@\$(TEST_DIR)"
   echo "	@\$(CAMLP5_COMM) \$(CAMLP5F) \$< -o \$*.ppo"
   echo "	\$(OCAMLOPT) \$(OCAMLI) -I \$(CAMLP5D) -c -impl \$*.ppo"
   echo "	\$(RM) \$*.ppo"
  ) >> $MAKEFILE
}

print_makefile() {
  print_common_header
  print_tools
  print_compiler
  print_common_target
}

# main

echo -e "\\x1b[36m=-=-\\x1b[0m Configure GeneWeb \\x1b[36m\
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-\\x1b[0m"

if [[ $INTERACTIVE == y ]]; then
  echo "Specify the build directory (default = ${BUILD_DIR})"
  read -re answer
  if [[ -n $answer ]]; then
    BUILD_DIR="${answer}"
  fi
  echo "Do you want to build the API (default = no)? [y/N]"
  read -re answer
  if [[ $answer =~ ^([yY][eE][sS]|[yY])$ ]]; then
    API=y
  fi
  if [[ $API == y ]]; then
    while [ -z "$LREDIS" ]; do
      echo "Please provide the absolute path of your redis"
      read -re answer
      LREDIS="${answer}"
      if ! check_redis_path; then
        echo "Invalid redis path!"
        LREDIS=
      fi
    done
  fi
  echo "Do you want to remove compilation warnings (default = no)? [y/N]"
  read -re answer
  if [[ $answer =~ ^([yY][eE][sS]|[yY])$ ]]; then
    WARN=
  fi
  echo "Do you want compilation debugging symbols (default = no)? [y/N]"
  read -re answer
  if [[ $answer =~ ^([yY][eE][sS]|[yY])$ ]]; then
    DEBUG="-g -annot"
  fi
  echo "Do you want to statically link libraries (default = no)? [y/N]"
  read -re answer
  if [[ $answer =~ ^([yY][eE][sS]|[yY])$ ]]; then
    STATIC=y
  fi
fi
# Check the environment
check_environment
# Print Makefile
print_makefile
