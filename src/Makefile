ROOT := ..
include $(ROOT)/tools/Makefile.config

# First rule 'all' is defined in Makefile.config.

# Overwrite variables.
OCAMLI := -I ../wserver -I ../dag2html

MAIN_EXE := gwc1 gwc2 consang gwd gwu update_nldb check_base
MAIN_OBJS := ansel

gwd_PREPEND_OBJS := gwlib
gwd_APPEND_OBJS := compilation

.PHONY: depend
depend: pa_lock.cmo pa_html.cmo q_codes.cmo
	$(ROOT)/tools/camlp5_depend.sh $(CAMLP5F) $(OCAMLI) -- *.ml* > .depend
# HACK: hardcoded because there seems to be a bug in dependencies computed with camlp5 (in case of let module in)
	echo "birthDeath.cmo cousins.cmo relationLink.cmo: pqueue.cmo pqueue.cmi" >> .depend
	echo "birthDeath.cmx cousins.cmx relationLink.cmx: pqueue.cmx pqueue.cmi" >> .depend
	echo "database.cmo: btree.cmo btree.cmi" >> .depend
	echo "database.cmx: btree.cmx btree.cmi" >> .depend

.depend:
	@if [ ! -e $@ ]; then $(MAKE) -o $@ depend; fi

.objs: .depend
	echo "# Generated by make" > $@
	$(foreach EXE,$(MAIN_EXE),echo "$(EXE)_OBJS := \
	  $(call DEP_OBJS,$(EXE),$($(EXE)_PREPEND_OBJS),$($(EXE)_APPEND_OBJS))" >> $@$(\n))
	$(foreach EXE,$(MAIN_EXE),echo "$(EXE).opt: \$$($(EXE)_OBJS:=.cmx)" >> $@$(\n))
	$(foreach EXE,$(MAIN_EXE),echo "$(EXE).out: \$$($(EXE)_OBJS:=.cmo)" >> $@$(\n))

ifeq ($(filter $(MAKECMDGOALS),clean depend),)
  include .depend
  include .objs
endif

LIBS = $(if $(filter y,$(WITH_API)),,unix)
REDIS_OBJS := utils mutex client cache redis_sync

opt: $(MAIN_OBJS:=.cmx) $(MAIN_EXE:=.opt)
out: $(MAIN_OBJS:=.cmo) $(MAIN_EXE:=.out)

out: STRIP := @\#

opt out:
	$(foreach EXE,$(MAIN_EXE),ln -fs $(EXE).$@ $(EXE) $(\n))
	$(STRIP) $(MAIN_EXE)

compilation.ml: always
	echo "Util.compilation_time_hook.val := \" ($$(date "+%Y-%m-%d %T %Z"))\";" > $@

gwlib.ml:
	echo "value prefix =" > $@
	echo "  try Sys.getenv \"GWPREFIX\" with" >> $@
	echo "  [ Not_found -> \"$(PREFIX)\" ]" | sed -e 's|\\|/|g' >> $@
	echo ";" >> $@

api_link.cmx api_link.cmo: OCAMLFLAGS += -I $(OCURL) -I $(LREDIS) -package yojson

%.opt: EXT = opt
%.out: EXT = out

%.out %.opt: LINKFLAGS += $(LIBUNIX) -I $(CAMLP5D)
%.out %.opt:
	$(OCAML_$(EXT)_LINK) $(OCAMLI) $(LIBS:=$(LIB_$(EXT)_EXT)) $(LINKFLAGS) $^ -o $@

gwd.out gwd.opt: LIBS += str gramlib

ifeq ($(WITH_API),y)
gwd.out gwd.opt: LIBS += re_emacs re_str
gwd.out gwd.opt: LINKFLAGS += -I $(OCURL) -I $(RE) -I $(LREDIS) \
	-package re -package uuidm -package yojson \
	$(REDIS_OBJS:=$(OBJ_$(EXT)_EXT))
endif

i18n_check.out: i18n_check.cmo
	$(OCAMLC) i18n_check.cmo -o i18n_check.out

i18n: pr_transl.cmo always
	if test -f i18n; then mv i18n i18n.bak; fi
	export LC_ALL=C; \
	OBJS=`(grep -w -c "transl conf" *.ml; grep -w -c "transl_nth conf" *.ml) | grep -v :0 | sed s/:.*$$// | sort | uniq`; \
	( \
	  for i in $$OBJS; do \
	    echo $$i 1>&2; \
	    camlp5r pa_macro.cmo ./pa_lock.cmo ./pa_html.cmo ./pr_transl.cmo pa_extend.cmo $$i; \
	  done; \
	  cat ../hd/etc/*.txt ../hd/lang/start_utf8.txt ../hd/lang/advanced.txt | sed -e 's/%\[//g' -e 's/%]//g' -e 's/\]/\]\n/g' | grep "\[" | sed -e "s/^.*\[\*\?//" -e "s/::.*$$//" -e "s/].*$$//" \
	) | \
	sort | uniq | grep -v '^$$' > i18n

# Generation of *_piqi.ml files
piqi:
	piqi of-proto --normalize api.proto
	piqic-ocaml --ext api.proto.piqi
	@echo -e "(* nocamlp5 *)\n" | cat - api_piqi.ml > tmp && mv tmp api_piqi.ml
	@echo -e "(* nocamlp5 *)\n" | cat - api_piqi_ext.ml > tmp && mv tmp api_piqi_ext.ml
	piqi of-proto --normalize api_app.proto
	piqic-ocaml --ext api_app.proto.piqi
	@echo -e "(* nocamlp5 *)\n" | cat - api_app_piqi.ml > tmp && mv tmp api_app_piqi.ml
	@echo -e "(* nocamlp5 *)\n" | cat - api_app_piqi_ext.ml > tmp && mv tmp api_app_piqi_ext.ml
	piqi of-proto --normalize api_saisie_read.proto
	piqic-ocaml --ext api_saisie_read.proto.piqi
	@echo -e "(* nocamlp5 *)\n" | cat - api_saisie_read_piqi.ml > tmp && mv tmp api_saisie_read_piqi.ml
	@echo -e "(* nocamlp5 *)\n" | cat - api_saisie_read_piqi_ext.ml > tmp && mv tmp api_saisie_read_piqi_ext.ml
	piqi of-proto --normalize api_saisie_write.proto
	piqic-ocaml --ext api_saisie_write.proto.piqi
	@echo -e "(* nocamlp5 *)\n" | cat - api_saisie_write_piqi.ml > tmp && mv tmp api_saisie_write_piqi.ml
	@echo -e "(* nocamlp5 *)\n" | cat - api_saisie_write_piqi_ext.ml > tmp && mv tmp api_saisie_write_piqi_ext.ml
	piqi of-proto --normalize api_link_tree.proto
	piqic-ocaml --ext api_link_tree.proto.piqi
	@echo -e "(* nocamlp5 *)\n" | cat - api_link_tree_piqi.ml > tmp && mv tmp api_link_tree_piqi.ml
	@echo -e "(* nocamlp5 *)\n" | cat - api_link_tree_piqi_ext.ml > tmp && mv tmp api_link_tree_piqi_ext.ml
	piqi of-proto --normalize api_stats.proto
	piqic-ocaml --ext api_stats.proto.piqi
	@echo -e "(* nocamlp5 *)\n" | cat - api_stats_piqi.ml > tmp && mv tmp api_stats_piqi.ml
	@echo -e "(* nocamlp5 *)\n" | cat - api_stats_piqi_ext.ml > tmp && mv tmp api_stats_piqi_ext.ml
	$(RM) *.piqi

.PHONY: clean
clean:
	$(RM) *.out *.opt *.cm[oixa] *.cmxa *.pp[oi] *.o *.a *.obj *.lib \
	*.lck *.bak *~ .#* *.annot
	$(RM) gwc gwc1 gwc2 consang gwd gwu update_nldb check_base gwlib.ml

always:
